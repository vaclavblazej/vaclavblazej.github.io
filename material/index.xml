<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homepage of Vašek</title>
    <link>https://vaclavblazej.github.io/material/</link>
    <description>Recent content on Homepage of Vašek</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© Václav Blažej</copyright>
    <lastBuildDate>Wed, 29 Dec 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://vaclavblazej.github.io/material/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust cheetsheet</title>
      <link>https://vaclavblazej.github.io/material/programming/rust/cheatsheet/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://vaclavblazej.github.io/material/programming/rust/cheatsheet/</guid>
      <description>&lt;p&gt;This page serves as a quick reference constructions in Rust programming language.&#xA;Knowledge of the language is assumed so the code explained minimally.&#xA;However, for a skilled programmer this page may serve as a syntax reference.&lt;/p&gt;&#xA;&lt;h1 id=&#34;main-and-prints&#34;&gt;Main and prints&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;main&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// todo here&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;function&lt;/span&gt;(par1: &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;Type&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;par2: &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;Type&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;-&amp;gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;ReturnType&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;expressions;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;val&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;function2(par1,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;par2,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;par3);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;returned_value&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// or return returned_value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;format!&lt;/code&gt;, &lt;code&gt;print!&lt;/code&gt; (&lt;code&gt;println!&lt;/code&gt;), and &lt;code&gt;eprint!&lt;/code&gt; for string formatting and printing&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;format!(&amp;quot;{} {:b} {:.5} {1:&amp;gt;20} {1:0&amp;gt;width}&amp;quot;,&amp;quot;first&amp;quot;,&amp;quot;one&amp;quot;,width=3);&lt;/code&gt; prints in binary, decimals, alligned, and 0-alligned&lt;/li&gt;&#xA;&lt;li&gt;traits &lt;code&gt;fmt::Debug&lt;/code&gt; is used by &lt;code&gt;{:?}&lt;/code&gt;, and &lt;code&gt;fmt::Display&lt;/code&gt; is used by &lt;code&gt;{}&lt;/code&gt; (see later); json style print &lt;code&gt;{:#?}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;use std::fmt;&lt;/code&gt; imports &lt;code&gt;fmt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;write!(buf, &amp;quot;val: {}&amp;quot;, val)&lt;/code&gt; writes formatted data into a buffer.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;struct Structure(i32, String);&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;return keyword exists, but we can just leave out &lt;code&gt;;&lt;/code&gt; after the last command to return its result&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Implement display for a structure to be able to format/print it with &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typing practice</title>
      <link>https://vaclavblazej.github.io/material/programming/typing/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://vaclavblazej.github.io/material/programming/typing/</guid>
      <description>&lt;head&gt;&#xA;    &lt;include src=&#34;./angular.js&#34;/&gt;&#xA;&lt;/head&gt;&#xA;&lt;style&gt;&#xA;    table, th, td {&#xA;        border: 1px solid black;&#xA;    }&#xA;    th, td {&#xA;        padding: 5px;&#xA;        text-align: left;&#xA;    }&#xA;    .unvisited { background: darkgoldenrod }&#xA;    .open      { background: green }&#xA;    .closed    { background: #a84444 }&#xA;    .wall      { background: #333333 }&#xA;    .type      { white-space: pre-wrap }&#xA;    .typed     { background: #66BB66 }&#xA;&lt;/style&gt;&#xA;&lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;var app = angular.module(&#39;app&#39;, []);&#xA;app.controller(&#39;myCtrl&#39;, function($scope, $timeout, $http) {&#xA;    $scope.arr = [];&#xA;    $scope.typed  = &#34;&#34;;&#xA;    $scope.target = &#34;Hello world!&#34;;&#xA;    $scope.done   = &#34;&#34;;&#xA;    $scope.error  = false;&#xA;    $http.get(&#39;./1.txt&#39;).then(function(res){&#xA;        $scope.target = res.data;&#xA;        console.log(res.data);&#xA;    }, function(){&#xA;        $scope.error = true;&#xA;    });&#xA;    //.success(function(data, status, headers, config) {&#xA;    //    $scope.contents=data;&#xA;    //}).error(function(data, status, headers, config) {          &#xA;    //    $scope.error = true;&#xA;    //});&#xA;    $scope.$watch(&#39;typed&#39;, process);&#xA;    function process(e){&#xA;        $scope.firstTyped = first($scope.typed);&#xA;        $scope.firstTarget = first($scope.target);&#xA;        if($scope.firstTyped === $scope.firstTarget){&#xA;            var len=$scope.firstTarget.length;&#xA;            $scope.target=$scope.target.substring(len);&#xA;            $scope.done +=$scope.typed.substring(0,len);&#xA;            $scope.typed =$scope.typed.substring(len);&#xA;        }&#xA;        //$scope.test = $scope.target.substring(0,$scope.res.length);&#xA;        //if($scope.res == $scope.target.substring(0,$scope.res.length)){&#xA;        //    console.log(&#39;test&#39;);&#xA;        //    $scope.target=$scope.target.substring($scope.res.length);&#xA;        //}&#xA;    }&#xA;    $scope.firstTyped = &#39;&#39;;&#xA;    $scope.firstTarget = &#39;&#39;;&#xA;    function first(sentence){&#xA;        var last = sentence.search(/[ \n]/i);&#xA;        return sentence.substring(0,last+1);&#xA;    }&#xA;});&#xA;&lt;/script&gt;&#xA;&lt;p&gt;One of programmer&amp;rsquo;s basic assets.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ACM Overview</title>
      <link>https://vaclavblazej.github.io/material/programming/acm/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://vaclavblazej.github.io/material/programming/acm/</guid>
      <description>&lt;p&gt;Welcome, this page contains information about repositories used for acm trainings on FIT-CTU.&#xA;Note that the formal requirements of the BI-ACM course can be found on &lt;a href=&#34;https://turing.cz/~tom/acm.html&#34;target=&#34;_blank&#34;&gt;Tom&amp;rsquo;s webpage&lt;span style=&#34;white-space: nowrap;&#34;&gt;&amp;thinsp;↗&lt;/span&gt;&lt;/a&gt; (in czech).&lt;/p&gt;&#xA;&lt;p&gt;Each team is encouraged to create their own repository contatining prepared solutions to well known problems. (You can use &lt;a href=&#34;https://gitlab.fit.cvut.cz/&#34;target=&#34;_blank&#34;&gt;school&amp;rsquo;s gitlab&lt;span style=&#34;white-space: nowrap;&#34;&gt;&amp;thinsp;↗&lt;/span&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/&#34;target=&#34;_blank&#34;&gt;github&lt;span style=&#34;white-space: nowrap;&#34;&gt;&amp;thinsp;↗&lt;/span&gt;&lt;/a&gt;, etc.)&lt;/p&gt;&#xA;&lt;h2 id=&#34;team-project&#34;&gt;Team Project&lt;/h2&gt;&#xA;&lt;p&gt;Teams usualy have their own repository with solutions to problems they encountered.&#xA;A team should be familiar with all codes they have in their repository because they will often have to edit these codes to solve a problem.&#xA;Team repositories often have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Profilování programu v C&#43;&#43;</title>
      <link>https://vaclavblazej.github.io/material/programming/profiling/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      <guid>https://vaclavblazej.github.io/material/programming/profiling/</guid>
      <description>&lt;p&gt;Pro optimalizace výkonu programu potřebujeme vědět, které jeho části se počítají nejdéle.&lt;/p&gt;&#xA;&lt;p&gt;Náinstalujeme nástroje pro profilování:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install valgrind kcachegrind graphviz&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Zkompilujeme program s přidaným info (-g přepínač)&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;g++ -std=c++11 -g main.cpp -o program&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;A pustíme pod valgrind s nastaveným nástrojem callgrind&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;valgrind --tool=callgrind ./program [program_options]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;výstupem je soubor typu callgrind.out.XXXXX (X čísla se stále zvětšují, poslední je aktuálnější), ten otevřeme pod kcachegrind&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;kcachegrind callgrind.out.20942&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Tento program visualizuje kolik proběhlo volání každé řádky.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generovaná grafika</title>
      <link>https://vaclavblazej.github.io/material/programming/make/processing/</link>
      <pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://vaclavblazej.github.io/material/programming/make/processing/</guid>
      <description>&lt;p&gt;Přes program &lt;a href=&#34;https://processing.org/download/?processing&#34;target=&#34;_blank&#34;&gt;Processing&lt;span style=&#34;white-space: nowrap;&#34;&gt;&amp;thinsp;↗&lt;/span&gt;&lt;/a&gt; lze relativně jednoduše tvořit grafiku a animace.&#xA;Na téhle stránce jsou uvedeny příklady programů.&lt;/p&gt;&#xA;&lt;p&gt;Verze 2.2.1 umožňuje generovat .gif obrázky pomocí modulu GifAnimation.&lt;/p&gt;&#xA;&lt;p&gt;Postupně sem budu přidávat ukázky animací a příslušné kódy.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bfs&#34;&gt;BFS&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./bfs.pde&#34;&gt;Processing BFS Code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./bfs2.gif&#34; alt=&#34;BFS_1&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
